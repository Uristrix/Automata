import img from './assets';
import { hellOver, style } from '../../../../index';

export const Topic3_12 = () => {
  return (
    <div className={style}>
      <h1>Базис Пирса.</h1>
      <p>
        Функция Пирса, согласно её таблице истинности, противоположна по значению функции «ИЛИ», поэтому рассматриваемый
        базис также называют базисом «ИЛИ-НЕ». С учётом закона де Моргана: x &uarr; y ={' '}
        <p className={hellOver}>x v y</p> = <p className={hellOver}>xy</p>.
      </p>
      <p>Выразим функции основного базиса через функцию Пирса:</p>
      <img src={img.img1} alt="formula" />
      <p>
        Формулы (33), (34), (35) являются выражением функций «НЕ», «И», «ИЛИ» через функцию Пирса, доказывая, что
        последняя является базисом. Для функции «ИЛИ-НЕ» выполняются следующие тождества:
      </p>
      <img src={img.img2} alt="formula" />
      <p>Для функции n переменных имеем:</p>
      <img src={img.img3} alt="formula" />
      <p>
        Методика представления любой функции в базисе «ИЛИ-НЕ» аналогична методике представления ФАЛ в базисе «И-НЕ».
      </p>
      <p>Вначале необходимо получить КНФ для преобразуемой функции в виде</p>
      <p>
        L = L<sub>1</sub>L<sub>2</sub> … L<sub>j</sub> … L<sub>m</sub> (37)
      </p>
      <img src={img.img4} alt="formula" />
      <p>Используя свойство (1), представим (37) в виде</p>
      <img src={img.img5} alt="formula" />
      <p>В свою очередь</p>
      <img src={img.img6} alt="formula" />
      <p>Таким образом, правило представления ФАЛ в базисе «ИЛИ-НЕ» будет следующим.</p>
      <p>
        {' '}
        Получаем КНФ из исходной ФАЛ. В полученной КНФ все операции логического сложения и умножения заменяем на функцию
        Пирса. После этого, группы членов, соответствующие элементарным дизъюнкциям, заключаем в скобки. И, наконец,
        используя выражение (33), освобождаемся от инверсии.
      </p>
    </div>
  );
};
