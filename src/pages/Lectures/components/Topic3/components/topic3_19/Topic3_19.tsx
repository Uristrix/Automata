import img from './assets';
import { hellOver, style } from '../../../../index';

export const Topic3_19 = () => {
  return (
    <div className={style}>
      <h1>Минимизация логических функций методом Квайна. Пример.</h1>
      <p>Рассмотрим применение этого метода на конкретном примере.</p>
      <p>Пример</p>
      <p>
        Пусть необходимо минимизировать функцию f(x1,x2,x3,x4), числовая форма представления которой такова
        f=&sum;(1,3,4,5,9,11,12,14). Эту функцию можно записать в виде СДНФ:
      </p>
      <img src={img.img1} alt="formula" />
      <p>
        <b>Этап 1.</b> Переход от СДНФ к сокращённой ДНФ. <br />
        Для этого составляем табл. 6. В клетках первого столбца и в клетках первой строки записываем исходные термы, и
        соответствующие им двоичные наборы. Если термы являются соседними, то их можно склеить. Поэтому на пересечении
        строк и столбцов, соответствующих соседним исходным термам, записываем результат их склеивания. Очевидно, что
        эта таблица будет симметричной относительно диагонали, клетки которой закрашены серым цветом.
      </p>
      <p>
        Проведём анализ заполненной табл. 6. Если клетки строки, соответствующие исходному терму, окажутся пустыми,
        значит терм является изолированным, и он представляет собой первичную импликанту высшего ранга.{' '}
      </p>
      <p>Этот терм необходимо включить в состав сокращённой ДНФ. В нашем примере таких термов нет.</p>
      <img src={img.img2} alt="formula" />
      <p>
        <em>
          Затем составляется другая табл. 7, которая содержит импликанты, являющиеся результатом склеивания исходных
          термов
        </em>
      </p>
      <p>
        <em>
          Заполняется и обрабатывается табл. 7 аналогично табл. 6. Процедура продолжается до тех пор, пока удаётся
          склеивать находимые импликанты.
        </em>
      </p>
      <p>
        <em>
          В нашем примере получаем в табл. 7 импликанту (x_2 ) ̅x4 ранга 2. Далее уменьшить ранг импликанты не удаётся.
          Таким образом, на первом этапе, путём склеивания исходных термов, а затем импликант меньшего ранга получаем
          сокращённую ДНФ.
        </em>
      </p>
      <img src={img.img3} alt="formula" />
      <p>
        <b>Этап 2.</b> Переход от сокращённой ДНФ к тупиковой ДНФ. Этот этап выполняется за несколько шагов.
      </p>
      <p>
        <b>Шаг 1.</b> Составляем таблицу покрытий (табл. 8), число строк которой равно количеству найденных простых
        импликант, а число столбцов совпадает с количеством исходных термов в СДНФ. Если в некоторый исходный терм
        входит первичная импликанта, т.е. исходный терм в результате склеивания преобразуется в первичную импликанту, то
        на пересечении соответствующей строки и столбца ставим метку. Такая таблица иногда называется таблицей Квайна
        или конституентно – импликантной матрицей.
      </p>
      <img src={img.img4} alt="formula" />
      <img src={img.img5} alt="formula" />
      <p>
        Остановимся подробнее на анализе таблицы покрытий. Строка таблицы покрытий представляет вхождения первичной
        импликанты в исходные термы. Так, в нашем примере, импликанта <p className={hellOver}>x2</p>x4 входит в четыре
        исходных терма <p className={hellOver}>x1</p>
        <p className={hellOver}>x2</p>
        <p className={hellOver}>x3</p>x4, <p className={hellOver}>x1</p>
        <p className={hellOver}>x2</p>x3x4, x1<p className={hellOver}>x2</p>
        <p className={hellOver}>x3</p>x4, x1<p className={hellOver}>x2</p>x3x4. Следовательно, её включение в ТДНФ
        обеспечит покрытие перечисленных исходных термов.
      </p>
      <p>
        Столбец таблицы покрытий представляет собой покрытие исходного терма первичными импликантами. Так, в нашем
        примере, первичный терм <p className={hellOver}>x1</p>
        <p className={hellOver}>x2</p>
        <p className={hellOver}>x3</p>x4 может быть покрыт или поглощён импликантой <p className={hellOver}>x1x3</p>x4
        или импликантой <p className={hellOver}>x2</p>x4. Следовательно, включение одной из этих импликант в тупиковую
        ДНФ обеспечит представление исходного терма <p className={hellOver}>x1</p>
        <p className={hellOver}>x2</p>
        <p className={hellOver}>x3</p>x4 в ТДНФ.
      </p>
      <p>
        <b>Шаг 2.</b> Нахождение существенных импликант. Если в каком-либо из столбцов имеется только одна метка, то
        соответствующая ей импликанта является существенной (в примере они закрашены серым цветом). Её присутствие в
        тупиковой ДНФ обязательно. В противном случае не будет покрытия соответствующего исходного терма, т.е. он не
        будет представлен в ТДНФ.
      </p>
      <p>
        В нашем примере существенными являются импликанты <p className={hellOver}>x1</p>x2<p className={hellOver}>x4</p>
        ,<p className={hellOver}>x2</p>x4. Вычёркиваем из таблицы столбцы, соответствующие существенным импликантам. Так
        как существенные импликанты входят в тупиковую ДНФ, то исходные термы, соответствующие им, будут представлены в
        тупиковой ДНФ.
      </p>
      <p>
        <b>Шаг 3.</b> Вычёркивание лишних столбцов. Если после выполнения предыдущего шага в таблице окажется два
        столбца, в которых имеются метки в одинаковых строках, то один из этих столбцов следует удалить. Это можно
        сделать по той причине, что выбор импликант, покрывающих оставшийся столбец, обеспечит покрытие и вычеркнутого
        столбца.
      </p>
      <p>В нашем примере таких столбцов нет. После третьего шага получаем табл. 9. </p>
      <img src={img.img6} alt="formula" />
      <p>
        <b>Шаг 4.</b> Вычёркивание лишних строк. Если после выполнения шага 3 появятся строки, в которых нет ни одной
        метки, то соответствующие им первичные импликанты исключаются из дальнейшего рассмотрения. Эти импликанты не
        могут обеспечить покрытия оставшихся исходных термов, поэтому их можно вычеркнуть.
      </p>
      <p>В нашем примере таких строк нет.</p>
      <p>
        <b>Шаг 5.</b> Выбор минимального покрытия. В таблице, полученной после выполнения 4-го шага, выбираем такую
        совокупность первичных импликант, которая включает метки во всех столбцах, хотя бы по одной метке в каждом
        столбце. Полученную совокупность первичных импликант включаем в тупиковую ДНФ, в добавление к существенным
        импликантам. Исключённые на 4-ом и 5-ом шагах импликанты являются лишними.
      </p>
      <p>
        В нашем примере берём импликанту <p className={hellOver}>x1</p>x2<p className={hellOver}>x3</p>. Тупиковая ДНФ
        такова fтднф(x1x2x3x4)= x1x2<p className={hellOver}>x4</p> v <p className={hellOver}>x2</p>x4 v{' '}
        <p className={hellOver}>x1</p>x2<p className={hellOver}>x3</p>.
      </p>
      <p>
        Таким образом, на втором этапе минимизации путём исключения лишних импликант <p className={hellOver}>x1</p>
        <p className={hellOver}>x3</p>x4, x2<p className={hellOver}>x3</p>
        <p className={hellOver}>x4</p> из сокращённой ДНФ получаем тупиковую форму.
      </p>
    </div>
  );
};
